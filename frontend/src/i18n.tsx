import React from "react";

export type Language = "en" | "zh";

type TranslationDict = {
	languageName: string;
	labels: {
		githubUsername: string;
		githubEmail: string;
		repoName: string;
		year: string;
		drawMode: string;
		actions: string;
		language: string;
		dataActions: string;
	};
	placeholders: {
		githubUsername: string;
		githubEmail: string;
		repoName: string;
	};
	drawModes: {
		pen: string;
		eraser: string;
	};
	buttons: {
		allGreen: string;
		reset: string;
		generateRepo: string;
		generating: string;
		export: string;
		import: string;
	};
	titles: {
		pen: string;
		eraser: string;
		allGreen: string;
		reset: string;
		generate: string;
		export: string;
		import: string;
	};
	messages: {
		generateRepoMissing: string;
		generateRepoError: string;
		noContributions: string;
		exportSuccess: string;
		exportError: string;
		importSuccess: string;
		importError: string;
	};
	gitInstall: {
		title: string;
		notInstalled: string;
		notInstalledLabel: string;
		downloadLink: string;
		close: string;
		instructions: {
			windows: string;
			mac: string;
			linux: string;
		};
		checkAgain: string;
		version: string;
	};
	gitPathSettings: {
		title: string;
		description: string;
		label: string;
		placeholder: string;
		setPath: string;
		setting: string;
		reset: string;
		resetSuccess: string;
		setSuccess: string;
		setError: string;
		resetError: string;
		pathNotFound: string;
		noteTitle: string;
		noteEmpty: string;
		noteCustom: string;
		noteManualCheck: string;
		detectedOS: string;
		currentPath: string;
		currentPathDefault: string;
		newPath: string;
		clearInput: string;
		loading: string;
	};
	calendar: {
		totalContributions: string;
		tooltipNone: string;
		tooltipSome: string;
		tooltipFuture: string;
		legendLess: string;
		legendMore: string;
	};
	characterSelector: {
		title: string;
		selectCharacter: string;
		tabUppercase: string;
		tabLowercase: string;
		tabNumbers: string;
		tabSymbols: string;
		previewTooltip: string;
		characterTool: string;
		cancelPreview: string;
		character: string;
	};
	pushDialog: {
		title: string;
		newRepo: string;
		existingRepo: string;
		repoName: string;
		repoNamePlaceholder: string;
		selectRepo: string;
		selectRepoPlaceholder: string;
		privateRepo: string;
		forcePush: string;
		forcePushWarning: string;
		commitCount: string;
		cancel: string;
		push: string;
		pushing: string;
		nameRules: string;
		nameWarningChinese: string;
		nameWarningInvalid: string;
		emptyNameError: string;
		invalidNameError: string;
		language: string;
		languageHint: string;
		multiLanguageMode: string;
		multiLanguageModeHint: string;
		languageConfig: string;
		totalRatio: string;
		addLanguage: string;
		deleteLanguage: string;
		lockedTooltip: string;
		unlockedTooltip: string;
		ratioWarning: string;
		autoDistributeTip: string;
		ratioDistributeTip: string;
		noLanguageError: string;
		zeroRatioError: string;
	};
	loginButton: {
		logout: string;
		logoutTitle: string;
		loginWithGitHub: string;
		loggingIn: string;
		cancelLoginTitle: string;
		loginTitle: string;
		loginHint: string;
		logoutSuccess: string;
		logoutFailed: string;
	};
	months: string[];
	weekdays: {
		mon: string;
		wed: string;
		fri: string;
	};
	languageSwitcher: {
		english: string;
		chinese: string;
	};
	tutorial: {
		title: string;
		close: string;
		previous: string;
		next: string;
		finish: string;
		goToStep: string;
		stepCounter: string;
		keyboardHint: string;
		steps: Array<{
			title: string;
			content: string;
		}>;
	};
};

const translations: Record<Language, TranslationDict> = {
	en: {
		languageName: "English",
		labels: {
			githubUsername: "GitHub Username",
			githubEmail: "GitHub Email",
			repoName: "Repository Name",
			year: "Year",
			drawMode: "Draw Mode",
			actions: "Actions",
			language: "Language",
			dataActions: "Data Actions",
		},
		placeholders: {
			githubUsername: "octocat",
			githubEmail: "monalisa@github.com",
			repoName: "my-contributions",
		},
		drawModes: {
			pen: "Pen",
			eraser: "Eraser",
		},
		buttons: {
			allGreen: "All Green",
			reset: "Reset",
			generateRepo: "Generate Repo",
			generating: "Generating...",
			export: "Export",
			import: "Import",
		},
		titles: {
			pen: "Pen mode - click or drag to add contributions",
			eraser: "Eraser mode - click or drag to clear contributions",
			allGreen: "Set all contributions to green",
			reset: "Clear all customised contribution data",
			generate: "Create a local git repository matching this contribution calendar",
			export: "Export current contributions to a JSON file",
			import: "Import contributions from a JSON file",
		},
		messages: {
			generateRepoMissing:
				"Please provide a GitHub username and email before generating a repository.",
			noContributions: "No contributions to generate. Add contributions first.",
			generateRepoError: "Failed to generate repository: {{message}}",
			exportSuccess: "Contributions exported to {{filePath}}",
			exportError: "Failed to export contributions: {{message}}",
			importSuccess: "Contributions imported successfully",
			importError: "Failed to import contributions: {{message}}",
		},
		gitInstall: {
			title: "Git Installation Required",
			notInstalled: "Git is not installed on your system. Please install Git to use this application.",
			notInstalledLabel: "Git Not Installed",
			downloadLink: "Download Git",
			close: "Close",
			instructions: {
				windows: "For Windows: Download Git from the official website and run the installer.",
				mac: "For macOS: Use Homebrew with 'brew install git' or download from the official website.",
				linux: "For Linux: Use your package manager (e.g., 'sudo apt install git' for Ubuntu).",
			},
			checkAgain: "Check Again",
			version: "Git Version: {{version}}",
		},
		gitPathSettings: {
			title: "Git Path Settings",
			description: "If Git is installed but not added to system PATH, enter the full path to the Git executable.",
			label: "Git Executable Path",
			placeholder: "e.g.: C:\\Program Files\\Git\\bin\\git.exe",
			setPath: "Set Path",
			setting: "Setting...",
			reset: "Reset to Default",
			resetSuccess: "Reset to default successfully",
			setSuccess: "Git path set successfully",
			setError: "Failed to set path: {{message}}",
			resetError: "Failed to reset: {{message}}",
			pathNotFound: "Specified path does not exist",
			noteTitle: "Note:",
			noteEmpty: "Leave empty or click 'Reset to Default' to use the git command from system PATH",
			noteCustom: "Enter full path (e.g., C:\\Program Files\\Git\\bin\\git.exe) to use that git executable",
			noteManualCheck: "You need to manually check Git status after setting",
			detectedOS: "Detected system:",
			currentPath: "Current Git Path",
			currentPathDefault: "Use system default path (git)",
			newPath: "Set New Git Path",
			clearInput: "Clear input",
			loading: "Loading...",
		},
		calendar: {
			totalContributions: "{{count}} contributions in {{year}}",
			tooltipNone: "No contributions on {{date}} - Click to add!",
			tooltipSome: "{{count}} contributions on {{date}}",
			tooltipFuture: "Upcoming date {{date}} - editing disabled",
			legendLess: "Less",
			legendMore: "More",
		},
		characterSelector: {
			title: "Select Pattern",
			selectCharacter: "Select Character (A-Z, a-z, 0-9)",
			tabUppercase: "A-Z",
			tabLowercase: "a-z",
			tabNumbers: "0-9",
			tabSymbols: "üé® Symbols",
			previewTooltip: "Preview character: {{char}}",
			characterTool: "Character Tool",
			cancelPreview: "Cancel Preview",
			character: "Character",
		},
		pushDialog: {
			title: "Push to GitHub",
			newRepo: "New Repository",
			existingRepo: "Existing Repository",
			repoName: "Repository Name",
			repoNamePlaceholder: "my-contributions",
			selectRepo: "Select Repository",
			selectRepoPlaceholder: "-- Select a repository --",
			privateRepo: "Make repository private",
			forcePush: "Force push (overwrite remote history)",
			forcePushWarning: "‚ö†Ô∏è Warning: Force push will overwrite the remote repository's commit history!",
			commitCount: "Will push: {{count}} commits",
			cancel: "Cancel",
			push: "Start Push",
			pushing: "Pushing...",
			nameRules: "Only letters, numbers, hyphens(-), underscores(_), and dots(.) are allowed",
			nameWarningChinese: "Contains Chinese or special characters, will be converted to: {{name}}",
			nameWarningInvalid: "Contains invalid characters, will be converted to: {{name}}",
			emptyNameError: "Please enter or select a repository name",
			invalidNameError: "Invalid repository name. Please use letters, numbers, hyphens, underscores, or dots",
			language: "Programming Language",
			languageHint: "Select the programming language for the generated repository",
			multiLanguageMode: "Enable Multi-Language Mode",
			multiLanguageModeHint: "Mix multiple programming languages with custom ratios",
			languageConfig: "Language Configuration",
			totalRatio: "Total Ratio",
			addLanguage: "+ Add Language",
			deleteLanguage: "Delete",
			lockedTooltip: "Locked - Won't be auto-adjusted",
			unlockedTooltip: "Auto-distributed - Will adjust based on other languages",
			ratioWarning: "‚ö†Ô∏è Warning: Total ratio exceeds 100%, please adjust",
			autoDistributeTip: "üí° After modifying ratio, it will be locked (üîí), and other unlocked languages will auto-adjust",
			ratioDistributeTip: "üìä System will distribute commits to different languages by ratio",
			noLanguageError: "Please add at least one language",
			zeroRatioError: "Total ratio cannot be 0",
		},
		loginButton: {
			logout: "Logout",
			logoutTitle: "Logout",
			loginWithGitHub: "GitHub Quick Login",
			loggingIn: "Logging in... (Click to cancel)",
			cancelLoginTitle: "Click to cancel login",
			loginTitle: "Login with GitHub account",
			loginHint: "Please complete authorization in browser, or click button to cancel",
			logoutSuccess: "Logged out successfully",
			logoutFailed: "Logout failed: {{message}}",
		},
		months: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
		weekdays: {
			mon: "Mon",
			wed: "Wed",
			fri: "Fri",
		},
		languageSwitcher: {
			english: "English",
			chinese: "‰∏≠Êñá",
		},
		tutorial: {
			title: "User Guide",
			close: "Close",
			previous: "Previous",
			next: "Next",
			finish: "Get Started",
			goToStep: "Go to step",
			stepCounter: "Step {{current}} of {{total}}",
			keyboardHint: "Use ‚Üê ‚Üí arrow keys to navigate",
			steps: [
				{
					title: "Welcome to GreenWall!",
					content: "GreenWall is a powerful tool that helps you customize your GitHub contribution calendar. You can draw patterns, write text, or create any design you want on your contribution graph.\n\nLet's learn how to use it!"
				},
				{
					title: "Drawing Tools",
					content: "Use the drawing tools in the control panel to customize your contribution calendar:\n\n‚Ä¢ Pen Mode: Click or drag on the calendar to add contributions\n‚Ä¢ Eraser Mode: Click or drag to remove contributions\n‚Ä¢ Character Tool: Quickly draw letters, numbers, or symbols\n\nYou can switch between different years to create multi-year patterns."
				},
				{
					title: "Quick Actions",
					content: "The action buttons help you quickly manage your contribution data:\n\n‚Ä¢ All Green: Fill the entire calendar with contributions\n‚Ä¢ Reset: Clear all customized contribution data\n‚Ä¢ Export: Save your design as a JSON file\n‚Ä¢ Import: Load a previously saved design"
				},
				{
					title: "Generate Repository",
					content: "Once you're satisfied with your design, click the 'Generate Repo' button:\n\n1. Enter your GitHub username and email\n2. Choose a repository name\n3. Select programming language (supports 20+ languages)\n4. Enable multi-language mode for mixed language projects\n5. Click 'Generate Repo' to create a local Git repository"
				},
				{
					title: "Push to GitHub",
					content: "After generating the repository, you can push it to GitHub:\n\n1. Use 'GitHub Quick Login' to authenticate (optional but recommended)\n2. Choose to create a new repository or select an existing one\n3. Configure repository settings (public/private)\n4. Click 'Start Push' to upload to GitHub\n\nYour custom contribution calendar will appear on your GitHub profile!"
				},
				{
					title: "Settings & Tips",
					content: "Additional features to enhance your experience:\n\n‚Ä¢ Git Path Settings: Configure custom Git executable path\n‚Ä¢ Theme Toggle: Switch between light and dark mode\n‚Ä¢ Language Switcher: Choose between English and Chinese\n‚Ä¢ Multi-year Support: Create patterns spanning multiple years"
				}
			]
		},
	},
	zh: {
		languageName: "‰∏≠Êñá",
		labels: {
			githubUsername: "GitHub Áî®Êà∑Âêç",
			githubEmail: "GitHub ÈÇÆÁÆ±",
			repoName: "‰ªìÂ∫ìÂêçÁß∞",
			year: "Âπ¥‰ªΩ",
			drawMode: "ÁªòÂà∂Ê®°Âºè",
			actions: "Êìç‰Ωú",
			language: "ËØ≠Ë®Ä",
			dataActions: "Êï∞ÊçÆÊìç‰Ωú",
		},
		placeholders: {
			githubUsername: "octocat",
			githubEmail: "monalisa@github.com",
			repoName: "my-contributions",
		},
		drawModes: {
			pen: "ÁîªÁ¨î",
			eraser: "Ê©°ÁöÆÊì¶",
		},
		buttons: {
			allGreen: "ÂÖ®Áªø",
			reset: "ÈáçÁΩÆ",
			generateRepo: "ÁîüÊàê‰ªìÂ∫ì",
			generating: "ÁîüÊàê‰∏≠...",
			export: "ÂØºÂá∫",
			import: "ÂØºÂÖ•",
		},
		titles: {
			pen: "ÁîªÁ¨îÊ®°Âºè - ÁÇπÂáªÊàñÊãñÊãΩÊ∑ªÂä†Ë¥°ÁåÆ",
			eraser: "Ê©°ÁöÆÊì¶Ê®°Âºè - ÁÇπÂáªÊàñÊãñÊãΩÊ∏ÖÈô§Ë¥°ÁåÆ",
			allGreen: "Â∞ÜÊâÄÊúâË¥°ÁåÆËÆæÁΩÆ‰∏∫ÁªøËâ≤",
			reset: "Ê∏ÖÈô§ÊâÄÊúâËá™ÂÆö‰πâË¥°ÁåÆÊï∞ÊçÆ",
			generate: "ÂàõÂª∫‰∏éÂΩìÂâçË¥°ÁåÆÂõæÂåπÈÖçÁöÑÊú¨Âú∞ Git ‰ªìÂ∫ì",
			export: "ÂØºÂá∫ÂΩìÂâçË¥°ÁåÆÊï∞ÊçÆÂà∞ JSON Êñá‰ª∂",
			import: "‰ªé JSON Êñá‰ª∂ÂØºÂÖ•Ë¥°ÁåÆÊï∞ÊçÆ",
		},
		messages: {
			generateRepoMissing: "ËØ∑ÂÖàÂ°´ÂÜô GitHub Áî®Êà∑ÂêçÂíåÈÇÆÁÆ±ÔºåÁÑ∂ÂêéÂÜçÁîüÊàê‰ªìÂ∫ì„ÄÇ",
			noContributions: "Ê≤°ÊúâÂèØÁîüÊàêÁöÑË¥°ÁåÆÔºåËØ∑ÂÖàÊ∑ªÂä†Ë¥°ÁåÆ„ÄÇ",
			generateRepoError: "ÁîüÊàê‰ªìÂ∫ìÂ§±Ë¥•Ôºö{{message}}",
			exportSuccess: "Ë¥°ÁåÆÊï∞ÊçÆÂ∑≤ÂØºÂá∫Âà∞ {{filePath}}",
			exportError: "ÂØºÂá∫Ë¥°ÁåÆÊï∞ÊçÆÂ§±Ë¥•Ôºö{{message}}",
			importSuccess: "Ë¥°ÁåÆÊï∞ÊçÆÂ∑≤ÊàêÂäüÂØºÂÖ•",
			importError: "ÂØºÂÖ•Ë¥°ÁåÆÊï∞ÊçÆÂ§±Ë¥•Ôºö{{message}}",
		},
		gitInstall: {
			title: "ÈúÄË¶ÅÂÆâË£Ö Git",
			notInstalled: "Á≥ªÁªüÊú™ÂÆâË£Ö Git„ÄÇËØ∑ÂÆâË£Ö Git ‰ª•‰ΩøÁî®Ê≠§Â∫îÁî®Á®ãÂ∫è„ÄÇ",
			notInstalledLabel: "Git Êú™ÂÆâË£Ö",
			downloadLink: "‰∏ãËΩΩ Git",
			close: "ÂÖ≥Èó≠",
			instructions: {
				windows: "Windows Á≥ªÁªüÔºö‰ªéÂÆòÊñπÁΩëÁ´ô‰∏ãËΩΩ Git Âπ∂ËøêË°åÂÆâË£ÖÁ®ãÂ∫è„ÄÇ",
				mac: "macOS Á≥ªÁªüÔºö‰ΩøÁî® Homebrew ËøêË°å 'brew install git' Êàñ‰ªéÂÆòÊñπÁΩëÁ´ô‰∏ãËΩΩ„ÄÇ",
				linux: "Linux Á≥ªÁªüÔºö‰ΩøÁî®ÂåÖÁÆ°ÁêÜÂô®ÂÆâË£ÖÔºàÂ¶Ç Ubuntu ‰ΩøÁî® 'sudo apt install git'Ôºâ„ÄÇ",
			},
			checkAgain: "ÂÜçÊ¨°Ê£ÄÊµã",
			version: "Git ÁâàÊú¨Ôºö{{version}}",
		},
		gitPathSettings: {
			title: "Git Ë∑ØÂæÑËÆæÁΩÆ",
			description: "Â¶ÇÊûú Git Â∑≤ÂÆâË£Ö‰ΩÜÊú™Ê∑ªÂä†Âà∞Á≥ªÁªü PATHÔºåËØ∑ËæìÂÖ• Git ÂèØÊâßË°åÊñá‰ª∂ÁöÑÂÆåÊï¥Ë∑ØÂæÑ„ÄÇ",
			label: "Git ÂèØÊâßË°åÊñá‰ª∂Ë∑ØÂæÑ",
			placeholder: "‰æãÂ¶Ç: C:\\Program Files\\Git\\bin\\git.exe",
			setPath: "ËÆæÁΩÆË∑ØÂæÑ",
			setting: "ËÆæÁΩÆ‰∏≠...",
			reset: "ÈáçÁΩÆ‰∏∫ÈªòËÆ§",
			resetSuccess: "Â∑≤ÈáçÁΩÆ‰∏∫ÈªòËÆ§Ë∑ØÂæÑ",
			setSuccess: "Git Ë∑ØÂæÑËÆæÁΩÆÊàêÂäü",
			setError: "ËÆæÁΩÆÂ§±Ë¥•Ôºö{{message}}",
			resetError: "ÈáçÁΩÆÂ§±Ë¥•Ôºö{{message}}",
			pathNotFound: "ÊåáÂÆöÁöÑË∑ØÂæÑ‰∏çÂ≠òÂú®",
			noteTitle: "ËØ¥ÊòéÔºö",
			noteEmpty: "ÁïôÁ©∫ÊàñÁÇπÂáª'ÈáçÁΩÆ‰∏∫ÈªòËÆ§'Â∞Ü‰ΩøÁî®Á≥ªÁªü PATH ‰∏≠ÁöÑ git ÂëΩ‰ª§",
			noteCustom: "ËæìÂÖ•ÂÆåÊï¥Ë∑ØÂæÑÔºàÂ¶Ç C:\\Program Files\\Git\\bin\\git.exeÔºâÂ∞Ü‰ΩøÁî®ËØ•Ë∑ØÂæÑÁöÑ git ÂèØÊâßË°åÊñá‰ª∂",
			noteManualCheck: "ËÆæÁΩÆÂêéÈúÄË¶ÅÊâãÂä®Ê£ÄÊü• Git Áä∂ÊÄÅ",
			detectedOS: "Ê£ÄÊµãÂà∞Á≥ªÁªü:",
			currentPath: "ÂΩìÂâçGitË∑ØÂæÑ",
			currentPathDefault: "‰ΩøÁî®Á≥ªÁªüÈªòËÆ§Ë∑ØÂæÑ (git)",
			newPath: "ËÆæÁΩÆÊñ∞ÁöÑGitË∑ØÂæÑ",
			clearInput: "Ê∏ÖÁ©∫ËæìÂÖ•",
			loading: "Âä†ËΩΩ‰∏≠...",
		},
		calendar: {
			totalContributions: "{{year}} Âπ¥ÂÖ± {{count}} Ê¨°Ë¥°ÁåÆ",
			tooltipNone: "{{date}} Ê≤°ÊúâË¥°ÁåÆ - ÁÇπÂáªÊ∑ªÂä†ÔºÅ",
			tooltipSome: "{{date}} Êúâ {{count}} Ê¨°Ë¥°ÁåÆ",
			tooltipFuture: "{{date}} ‰∏∫Êú™Êù•Êó•ÊúüÔºåÁ¶ÅÊ≠¢ÁºñËæë",
			legendLess: "ËæÉÂ∞ë",
			legendMore: "Êõ¥Â§ö",
		},
		characterSelector: {
			title: "ÈÄâÊã©ÂõæÊ°à",
			selectCharacter: "ÈÄâÊã©Â≠óÁ¨¶ (A-Z, a-z, 0-9)",
			tabUppercase: "A-Z",
			tabLowercase: "a-z",
			tabNumbers: "0-9",
			tabSymbols: "üé® Á¨¶Âè∑",
			previewTooltip: "È¢ÑËßàÂ≠óÁ¨¶: {{char}}",
			characterTool: "Â≠óÁ¨¶Â∑•ÂÖ∑",
			cancelPreview: "ÂèñÊ∂àÈ¢ÑËßà",
			character: "Â≠óÁ¨¶",
		},
		pushDialog: {
			title: "Êé®ÈÄÅÂà∞ GitHub",
			newRepo: "Êñ∞Âª∫‰ªìÂ∫ì",
			existingRepo: "ÈÄâÊã©Áé∞Êúâ‰ªìÂ∫ì",
			repoName: "‰ªìÂ∫ìÂêçÁß∞",
			repoNamePlaceholder: "my-contributions",
			selectRepo: "ÈÄâÊã©‰ªìÂ∫ì",
			selectRepoPlaceholder: "-- ÈÄâÊã©‰∏Ä‰∏™‰ªìÂ∫ì --",
			privateRepo: "ËÆæ‰∏∫ÁßÅÊúâ‰ªìÂ∫ì",
			forcePush: "Âº∫Âà∂Êé®ÈÄÅÔºàË¶ÜÁõñËøúÁ®ãÂéÜÂè≤Ôºâ",
			forcePushWarning: "‚ö†Ô∏è Ë≠¶ÂëäÔºöÂº∫Âà∂Êé®ÈÄÅ‰ºöË¶ÜÁõñËøúÁ®ã‰ªìÂ∫ìÁöÑÊèê‰∫§ÂéÜÂè≤ÔºÅ",
			commitCount: "Â∞ÜË¶ÅÊé®ÈÄÅÔºö{{count}} ‰∏™Êèê‰∫§",
			cancel: "ÂèñÊ∂à",
			push: "ÂºÄÂßãÊé®ÈÄÅ",
			pushing: "Êé®ÈÄÅ‰∏≠...",
			nameRules: "Âè™ËÉΩÂåÖÂê´Â≠óÊØç„ÄÅÊï∞Â≠ó„ÄÅËøûÂ≠óÁ¨¶(-)„ÄÅ‰∏ãÂàíÁ∫ø(_)„ÄÅÁÇπ(.)",
			nameWarningChinese: "ÂåÖÂê´‰∏≠ÊñáÊàñÁâπÊÆäÂ≠óÁ¨¶ÔºåÂ∞ÜËá™Âä®ËΩ¨Êç¢‰∏∫: {{name}}",
			nameWarningInvalid: "ÂåÖÂê´‰∏çÂÖÅËÆ∏ÁöÑÂ≠óÁ¨¶ÔºåÂ∞ÜËá™Âä®ËΩ¨Êç¢‰∏∫: {{name}}",
			emptyNameError: "ËØ∑ËæìÂÖ•ÊàñÈÄâÊã©‰ªìÂ∫ìÂêçÁß∞",
			invalidNameError: "‰ªìÂ∫ìÂêçÊó†ÊïàÔºåËØ∑‰ΩøÁî®Â≠óÊØç„ÄÅÊï∞Â≠ó„ÄÅËøûÂ≠óÁ¨¶„ÄÅ‰∏ãÂàíÁ∫øÊàñÁÇπ",
			language: "ÁºñÁ®ãËØ≠Ë®Ä",
			languageHint: "ÈÄâÊã©ÁîüÊàê‰ªìÂ∫ì‰ΩøÁî®ÁöÑÁºñÁ®ãËØ≠Ë®Ä",
			multiLanguageMode: "ÂêØÁî®Â§öËØ≠Ë®ÄÊ®°Âºè",
			multiLanguageModeHint: "Ê∑∑Âêà‰ΩøÁî®Â§öÁßçÁºñÁ®ãËØ≠Ë®ÄÔºåËá™ÂÆö‰πâÊØèÁßçËØ≠Ë®ÄÁöÑÊØî‰æã",
			languageConfig: "ËØ≠Ë®ÄÈÖçÁΩÆ",
			totalRatio: "ÊÄªÊØî‰æã",
			addLanguage: "+ Ê∑ªÂä†ËØ≠Ë®Ä",
			deleteLanguage: "Âà†Èô§",
			lockedTooltip: "Â∑≤ÈîÅÂÆö - ‰∏ç‰ºöËá™Âä®Ë∞ÉÊï¥",
			unlockedTooltip: "Ëá™Âä®ÂàÜÈÖç - ‰ºöÊ†πÊçÆÂÖ∂‰ªñËØ≠Ë®ÄË∞ÉÊï¥",
			ratioWarning: "‚ö†Ô∏è Ë≠¶ÂëäÔºöÊÄªÊØî‰æãË∂ÖËøá100%ÔºåÂª∫ËÆÆË∞ÉÊï¥",
			autoDistributeTip: "üí° ‰øÆÊîπÊØî‰æãÂêé‰ºöËá™Âä®ÈîÅÂÆöÔºàüîíÔºâÔºåÂÖ∂‰ªñÊú™ÈîÅÂÆöÁöÑËØ≠Ë®Ä‰ºöËá™Âä®Ë∞ÉÊï¥",
			ratioDistributeTip: "üìä Á≥ªÁªü‰ºöÊåâÊØî‰æãÂæ™ÁéØÂàÜÈÖçÊèê‰∫§Âà∞‰∏çÂêåËØ≠Ë®Ä",
			noLanguageError: "ËØ∑Ëá≥Â∞ëÊ∑ªÂä†‰∏ÄÁßçËØ≠Ë®Ä",
			zeroRatioError: "ËØ≠Ë®ÄÊØî‰æãÊÄªÂíå‰∏çËÉΩ‰∏∫0",
		},
		loginButton: {
			logout: "ÈÄÄÂá∫",
			logoutTitle: "ÈÄÄÂá∫ÁôªÂΩï",
			loginWithGitHub: "GitHub Âø´Êç∑ÁôªÂΩï",
			loggingIn: "ÁôªÂΩï‰∏≠... (ÁÇπÂáªÂèñÊ∂à)",
			cancelLoginTitle: "ÁÇπÂáªÂèñÊ∂àÁôªÂΩï",
			loginTitle: "‰ΩøÁî®GitHubË¥¶Âè∑Âø´Êç∑ÁôªÂΩï",
			loginHint: "ËØ∑Âú®ÊµèËßàÂô®‰∏≠ÂÆåÊàêÊéàÊùÉÔºåÊàñÁÇπÂáªÊåâÈíÆÂèñÊ∂à",
			logoutSuccess: "Â∑≤ÈÄÄÂá∫ÁôªÂΩï",
			logoutFailed: "ÈÄÄÂá∫ÁôªÂΩïÂ§±Ë¥•: {{message}}",
		},
		months: [
			"1",
			"2",
			"3",
			"4",
			"5",
			"6",
			"7",
			"8",
			"9",
			"10",
			"11",
			"12",
		],
		weekdays: {
			mon: "‰∏Ä",
			wed: "‰∏â",
			fri: "‰∫î",
		},
		languageSwitcher: {
			english: "English",
			chinese: "‰∏≠Êñá",
		},
		tutorial: {
			title: "‰ΩøÁî®ÊïôÁ®ã",
			close: "ÂÖ≥Èó≠",
			previous: "‰∏ä‰∏ÄÊ≠•",
			next: "‰∏ã‰∏ÄÊ≠•",
			finish: "ÂºÄÂßã‰ΩøÁî®",
			goToStep: "Ë∑≥ËΩ¨Âà∞Ê≠•È™§",
			stepCounter: "Á¨¨ {{current}} Ê≠•ÔºåÂÖ± {{total}} Ê≠•",
			keyboardHint: "‰ΩøÁî® ‚Üê ‚Üí ÊñπÂêëÈîÆÂØºËà™",
			steps: [
				{
					title: "Ê¨¢Ëøé‰ΩøÁî® GreenWall!",
					content: "GreenWall ÊòØ‰∏Ä‰∏™Âº∫Â§ßÁöÑÂ∑•ÂÖ∑ÔºåÂ∏ÆÂä©ÊÇ®Ëá™ÂÆö‰πâ GitHub Ë¥°ÁåÆÊó•ÂéÜ„ÄÇÊÇ®ÂèØ‰ª•Âú®Ë¥°ÁåÆÂõæ‰∏äÁªòÂà∂ÂõæÊ°à„ÄÅ‰π¶ÂÜôÊñáÂ≠óÊàñÂàõÂª∫‰ªª‰ΩïÊÇ®ÊÉ≥Ë¶ÅÁöÑËÆæËÆ°„ÄÇ\n\nËÆ©Êàë‰ª¨ÂºÄÂßãÂ≠¶‰π†Â¶Ç‰Ωï‰ΩøÁî®ÂÆÉÔºÅ"
				},
				{
					title: "ÁªòÂõæÂ∑•ÂÖ∑",
					content: "‰ΩøÁî®ÊéßÂà∂Èù¢Êùø‰∏≠ÁöÑÁªòÂõæÂ∑•ÂÖ∑Êù•Ëá™ÂÆö‰πâÊÇ®ÁöÑË¥°ÁåÆÊó•ÂéÜÔºö\n\n‚Ä¢ ÁîªÁ¨îÊ®°ÂºèÔºöÁÇπÂáªÊàñÊãñÂä®Êó•ÂéÜÊù•Ê∑ªÂä†Ë¥°ÁåÆ\n‚Ä¢ Ê©°ÁöÆÊì¶Ê®°ÂºèÔºöÁÇπÂáªÊàñÊãñÂä®Êù•ÁßªÈô§Ë¥°ÁåÆ\n‚Ä¢ Â≠óÁ¨¶Â∑•ÂÖ∑ÔºöÂø´ÈÄüÁªòÂà∂Â≠óÊØç„ÄÅÊï∞Â≠óÊàñÁ¨¶Âè∑\n\nÊÇ®ÂèØ‰ª•ÂàáÊç¢‰∏çÂêåÂπ¥‰ªΩÊù•ÂàõÂª∫Ë∑®Âπ¥ÂõæÊ°à„ÄÇ"
				},
				{
					title: "Âø´Êç∑Êìç‰Ωú",
					content: "Êìç‰ΩúÊåâÈíÆÂ∏ÆÂä©ÊÇ®Âø´ÈÄüÁÆ°ÁêÜË¥°ÁåÆÊï∞ÊçÆÔºö\n\n‚Ä¢ ÂÖ®ÁªøÔºöÁî®Ë¥°ÁåÆÂ°´ÂÖÖÊï¥‰∏™Êó•ÂéÜ\n‚Ä¢ ÈáçÁΩÆÔºöÊ∏ÖÈô§ÊâÄÊúâËá™ÂÆö‰πâË¥°ÁåÆÊï∞ÊçÆ\n‚Ä¢ ÂØºÂá∫ÔºöÂ∞ÜÊÇ®ÁöÑËÆæËÆ°‰øùÂ≠ò‰∏∫ JSON Êñá‰ª∂\n‚Ä¢ ÂØºÂÖ•ÔºöÂä†ËΩΩ‰πãÂâç‰øùÂ≠òÁöÑËÆæËÆ°"
				},
				{
					title: "ÁîüÊàê‰ªìÂ∫ì",
					content: "ÂΩìÊÇ®ÂØπËÆæËÆ°Êª°ÊÑèÂêéÔºåÁÇπÂáª„ÄåÁîüÊàê‰ªìÂ∫ì„ÄçÊåâÈíÆÔºö\n\n1. ËæìÂÖ•ÊÇ®ÁöÑ GitHub Áî®Êà∑ÂêçÂíåÈÇÆÁÆ±\n2. ÈÄâÊã©‰ªìÂ∫ìÂêçÁß∞\n3. ÈÄâÊã©ÁºñÁ®ãËØ≠Ë®ÄÔºàÊîØÊåÅ 20+ ÁßçËØ≠Ë®ÄÔºâ\n4. ÂêØÁî®Â§öËØ≠Ë®ÄÊ®°Âºè‰ª•Ê∑∑ÂêàÂ§öÁßçËØ≠Ë®ÄÈ°πÁõÆ\n5. ÁÇπÂáª„ÄåÁîüÊàê‰ªìÂ∫ì„ÄçÂàõÂª∫Êú¨Âú∞ Git ‰ªìÂ∫ì"
				},
				{
					title: "Êé®ÈÄÅÂà∞ GitHub",
					content: "ÁîüÊàê‰ªìÂ∫ìÂêéÔºåÊÇ®ÂèØ‰ª•Â∞ÜÂÖ∂Êé®ÈÄÅÂà∞ GitHubÔºö\n\n1. ‰ΩøÁî®„ÄåGitHub Âø´Êç∑ÁôªÂΩï„ÄçËøõË°åË∫´‰ªΩÈ™åËØÅÔºàÂèØÈÄâ‰ΩÜÊé®ËçêÔºâ\n2. ÈÄâÊã©ÂàõÂª∫Êñ∞‰ªìÂ∫ìÊàñÈÄâÊã©Áé∞Êúâ‰ªìÂ∫ì\n3. ÈÖçÁΩÆ‰ªìÂ∫ìËÆæÁΩÆÔºàÂÖ¨ÂºÄ/ÁßÅÊúâÔºâ\n4. ÁÇπÂáª„ÄåÂºÄÂßãÊé®ÈÄÅ„Äç‰∏ä‰º†Âà∞ GitHub\n\nÊÇ®ÁöÑËá™ÂÆö‰πâË¥°ÁåÆÊó•ÂéÜÂ∞ÜÂá∫Áé∞Âú®ÊÇ®ÁöÑ GitHub ‰∏™‰∫∫ËµÑÊñô‰∏≠ÔºÅ"
				},
				{
					title: "ËÆæÁΩÆ‰∏éÊäÄÂ∑ß",
					content: "Â¢ûÂº∫ÊÇ®‰ΩøÁî®‰ΩìÈ™åÁöÑÈ¢ùÂ§ñÂäüËÉΩÔºö\n\n‚Ä¢ Git Ë∑ØÂæÑËÆæÁΩÆÔºöÈÖçÁΩÆËá™ÂÆö‰πâ Git ÂèØÊâßË°åÊñá‰ª∂Ë∑ØÂæÑ\n‚Ä¢ ‰∏ªÈ¢òÂàáÊç¢ÔºöÂú®‰∫ÆËâ≤ÂíåÊöóËâ≤Ê®°Âºè‰πãÈó¥ÂàáÊç¢\n‚Ä¢ ËØ≠Ë®ÄÂàáÊç¢ÔºöÂú®‰∏≠Ëã±Êñá‰πãÈó¥ÈÄâÊã©\n‚Ä¢ Â§öÂπ¥ÊîØÊåÅÔºöÂàõÂª∫Ë∑®Ë∂äÂ§öÂπ¥ÁöÑÂõæÊ°à"
				}
			]
		},
	},
};

type TranslationContextValue = {
	language: Language;
	setLanguage: (language: Language) => void;
	t: (key: string, params?: Record<string, string | number>) => string;
	dictionary: TranslationDict;
};

const LANGUAGE_STORAGE_KEY = "github-contributor.language";

const TranslationContext = React.createContext<TranslationContextValue | undefined>(undefined);

function interpolate(template: string, params?: Record<string, string | number>) {
	if (!params) {
		return template;
	}
	return template.replace(/\{\{(.*?)\}\}/g, (_, rawKey: string) => {
		const key = rawKey.trim();
		const value = params[key];
		return value === undefined ? `{{${key}}}` : String(value);
	});
}

function resolveKey(dictionary: TranslationDict, key: string): string | undefined {
	const parts = key.split(".");
	let current: any = dictionary;

	for (const part of parts) {
		if (current && typeof current === "object" && part in current) {
			current = current[part];
		} else {
			return undefined;
		}
	}

	return typeof current === "string" ? current : undefined;
}

export const TranslationProvider: React.FC<React.PropsWithChildren> = ({ children }) => {
	const [language, setLanguageState] = React.useState<Language>(() => {
		if (typeof window === "undefined") {
			return "en";
		}
		const stored = window.localStorage.getItem(LANGUAGE_STORAGE_KEY) as Language | null;
		return stored === "en" || stored === "zh" ? stored : "en";
	});

	const dictionary = translations[language];

	const setLanguage = React.useCallback((next: Language) => {
		setLanguageState(next);
		if (typeof window !== "undefined") {
			window.localStorage.setItem(LANGUAGE_STORAGE_KEY, next);
		}
	}, []);

	const translate = React.useCallback(
		(key: string, params?: Record<string, string | number>) => {
			const template = resolveKey(dictionary, key) ?? key;
			return interpolate(template, params);
		},
		[dictionary],
	);

	const contextValue = React.useMemo(
		() => ({
			language,
			setLanguage,
			t: translate,
			dictionary,
		}),
		[language, setLanguage, translate, dictionary],
	);

	return <TranslationContext.Provider value={contextValue}>{children}</TranslationContext.Provider>;
};

export function useTranslations() {
	const context = React.useContext(TranslationContext);
	if (!context) {
		throw new Error("useTranslations must be used within a TranslationProvider");
	}
	return context;
}

export const AVAILABLE_LANGUAGES: { value: Language; label: string }[] = [
	{ value: "en", label: translations.en.languageName },
	{ value: "zh", label: translations.zh.languageName },
];
