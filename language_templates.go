package main

import (
	"fmt"
	"path/filepath"
	"strings"
)

// LanguageType 编程语言类型
type LanguageType string

const (
	LangMarkdown   LanguageType = "markdown"
	LangJava       LanguageType = "java"
	LangPython     LanguageType = "python"
	LangJavaScript LanguageType = "javascript"
	LangTypeScript LanguageType = "typescript"
	LangGo         LanguageType = "go"
	LangRust       LanguageType = "rust"
	LangCpp        LanguageType = "cpp"
	LangC          LanguageType = "c"
	LangCSharp     LanguageType = "csharp"
	LangPHP        LanguageType = "php"
	LangRuby       LanguageType = "ruby"
	LangSwift      LanguageType = "swift"
	LangKotlin     LanguageType = "kotlin"
	LangShell      LanguageType = "shell"
	LangVue        LanguageType = "vue"
	LangHTML       LanguageType = "html"
	LangCSS        LanguageType = "css"
	LangSCSS       LanguageType = "scss"
	LangSQL        LanguageType = "sql"
)

// LanguageTemplate 语言模板接口
type LanguageTemplate interface {
	// GetFileExtension 获取文件扩展名
	GetFileExtension() string
	// GetActivityFileName 获取活动日志文件名
	GetActivityFileName() string
	// GenerateCode 生成代码内容
	GenerateCode(date string, commitNum int, totalCommits int) string
	// GetReadmeContent 获取README内容
	GetReadmeContent(repoName string) string
	// GetAdditionalFiles 获取额外需要创建的文件
	GetAdditionalFiles(repoName string) map[string]string
	// GetLanguageName 获取语言显示名称
	GetLanguageName() string
}

// MarkdownTemplate Markdown模板
type MarkdownTemplate struct{}

func (t *MarkdownTemplate) GetFileExtension() string     { return ".md" }
func (t *MarkdownTemplate) GetActivityFileName() string  { return "activity.log" }
func (t *MarkdownTemplate) GetLanguageName() string      { return "Markdown" }

func (t *MarkdownTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	return fmt.Sprintf("%s commit %d\n", date, commitNum)
}

func (t *MarkdownTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nGenerated with https://github.com/zmrlft/GreenWall.\n", repoName)
}

func (t *MarkdownTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{}
}

// JavaTemplate Java模板
type JavaTemplate struct{}

func (t *JavaTemplate) GetFileExtension() string     { return ".java" }
func (t *JavaTemplate) GetActivityFileName() string  { return "Activity.java" }
func (t *JavaTemplate) GetLanguageName() string      { return "Java" }

func (t *JavaTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	className := fmt.Sprintf("Contribution_%s_%d", strings.ReplaceAll(date, "-", "_"), commitNum)
	return fmt.Sprintf(`package com.greenwall.contributions;

/**
 * Contribution record for %s
 * Commit %d of %d
 * Generated by GreenWall
 */
public class %s {
    private String date = "%s";
    private int commitNumber = %d;
    private int totalCommits = %d;
    
    public String getDate() {
        return date;
    }
    
    public int getCommitNumber() {
        return commitNumber;
    }
    
    public int getTotalCommits() {
        return totalCommits;
    }
    
    public String getInfo() {
        return String.format("Contribution on %%s (%%d/%%d)", date, commitNumber, totalCommits);
    }
}
`, date, commitNum, totalCommits, className, date, commitNum, totalCommits)
}

func (t *JavaTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA Java project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated Java contribution records.\n\n## Structure\n\n- `src/main/java/com/greenwall/contributions/` - Contribution classes\n- `README.md` - This file\n\n## License\n\nMIT License\n", repoName)
}

func (t *JavaTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"pom.xml": fmt.Sprintf(`<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
         http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <groupId>com.greenwall</groupId>
    <artifactId>%s</artifactId>
    <version>1.0.0</version>
    <packaging>jar</packaging>
    
    <name>%s</name>
    <description>Generated with GreenWall</description>
    
    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>
</project>
`, repoName, repoName),
		".gitignore": `target/
*.class
*.jar
*.war
*.ear
.idea/
*.iml
.vscode/
`,
	}
}

// PythonTemplate Python模板
type PythonTemplate struct{}

func (t *PythonTemplate) GetFileExtension() string     { return ".py" }
func (t *PythonTemplate) GetActivityFileName() string  { return "activity.py" }
func (t *PythonTemplate) GetLanguageName() string      { return "Python" }

func (t *PythonTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	_ = fmt.Sprintf("contribution_%s_%d", strings.ReplaceAll(date, "-", "_"), commitNum)
	return fmt.Sprintf(`"""
Contribution record for %s
Commit %d of %d
Generated by GreenWall
"""

from datetime import datetime


class Contribution:
    """Represents a single contribution record."""
    
    def __init__(self):
        self.date = "%s"
        self.commit_number = %d
        self.total_commits = %d
    
    def get_info(self) -> str:
        """Get contribution information."""
        return f"Contribution on {self.date} ({self.commit_number}/{self.total_commits})"
    
    def __str__(self) -> str:
        return self.get_info()
    
    def __repr__(self) -> str:
        return f"Contribution(date='{self.date}', commit={self.commit_number})"


# Module-level instance
contribution = Contribution()

if __name__ == "__main__":
    print(contribution.get_info())
`, date, commitNum, totalCommits, date, commitNum, totalCommits)
}

func (t *PythonTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA Python project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated Python contribution records.\n\n## Structure\n\n- `contributions/` - Contribution modules\n- `README.md` - This file\n- `requirements.txt` - Python dependencies\n\n## Installation\n\n```bash\npip install -r requirements.txt\n```\n\n## License\n\nMIT License\n", repoName)
}

func (t *PythonTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"requirements.txt": `# Python dependencies
# Add your dependencies here
`,
		"setup.py": fmt.Sprintf(`from setuptools import setup, find_packages

setup(
    name="%s",
    version="1.0.0",
    description="Generated with GreenWall",
    packages=find_packages(),
    python_requires=">=3.7",
)
`, repoName),
		".gitignore": `__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
.venv/
venv/
ENV/
.vscode/
.idea/
`,
		"contributions/__init__.py": `"""Contributions package."""
`,
	}
}

// JavaScriptTemplate JavaScript模板
type JavaScriptTemplate struct{}

func (t *JavaScriptTemplate) GetFileExtension() string     { return ".js" }
func (t *JavaScriptTemplate) GetActivityFileName() string  { return "activity.js" }
func (t *JavaScriptTemplate) GetLanguageName() string      { return "JavaScript" }

func (t *JavaScriptTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	return fmt.Sprintf(`/**
 * Contribution record for %s
 * Commit %d of %d
 * Generated by GreenWall
 */

class Contribution {
  constructor() {
    this.date = '%s';
    this.commitNumber = %d;
    this.totalCommits = %d;
  }

  getInfo() {
    return ` + "`Contribution on ${this.date} (${this.commitNumber}/${this.totalCommits})`" + `;
  }

  toString() {
    return this.getInfo();
  }
}

module.exports = Contribution;

// If running directly
if (require.main === module) {
  const contribution = new Contribution();
  console.log(contribution.getInfo());
}
`, date, commitNum, totalCommits, date, commitNum, totalCommits)
}

func (t *JavaScriptTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA JavaScript/Node.js project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated JavaScript contribution records.\n\n## Structure\n\n- `src/` - Source files\n- `package.json` - Node.js package configuration\n- `README.md` - This file\n\n## Installation\n\n```bash\nnpm install\n```\n\n## License\n\nMIT License\n", repoName)
}

func (t *JavaScriptTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"package.json": fmt.Sprintf(`{
  "name": "%s",
  "version": "1.0.0",
  "description": "Generated with GreenWall",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": ["greenwall", "contributions"],
  "author": "",
  "license": "MIT"
}
`, repoName),
		".gitignore": `node_modules/
npm-debug.log
yarn-error.log
.env
.DS_Store
dist/
build/
.vscode/
.idea/
`,
	}
}

// TypeScriptTemplate TypeScript模板
type TypeScriptTemplate struct{}

func (t *TypeScriptTemplate) GetFileExtension() string     { return ".ts" }
func (t *TypeScriptTemplate) GetActivityFileName() string  { return "activity.ts" }
func (t *TypeScriptTemplate) GetLanguageName() string      { return "TypeScript" }

func (t *TypeScriptTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	return fmt.Sprintf(`/**
 * Contribution record for %s
 * Commit %d of %d
 * Generated by GreenWall
 */

interface ContributionInfo {
  date: string;
  commitNumber: number;
  totalCommits: number;
}

class Contribution implements ContributionInfo {
  public readonly date: string = '%s';
  public readonly commitNumber: number = %d;
  public readonly totalCommits: number = %d;

  getInfo(): string {
    return ` + "`Contribution on ${this.date} (${this.commitNumber}/${this.totalCommits})`" + `;
  }

  toString(): string {
    return this.getInfo();
  }
}

export default Contribution;

// If running directly
if (require.main === module) {
  const contribution = new Contribution();
  console.log(contribution.getInfo());
}
`, date, commitNum, totalCommits, date, commitNum, totalCommits)
}

func (t *TypeScriptTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA TypeScript project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated TypeScript contribution records.\n\n## Structure\n\n- `src/` - TypeScript source files\n- `package.json` - Node.js package configuration\n- `tsconfig.json` - TypeScript configuration\n- `README.md` - This file\n\n## Installation\n\n```bash\nnpm install\n```\n\n## Build\n\n```bash\nnpm run build\n```\n\n## License\n\nMIT License\n", repoName)
}

func (t *TypeScriptTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"package.json": fmt.Sprintf(`{
  "name": "%s",
  "version": "1.0.0",
  "description": "Generated with GreenWall",
  "main": "dist/index.js",
  "scripts": {
    "build": "tsc",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": ["greenwall", "contributions", "typescript"],
  "author": "",
  "license": "MIT",
  "devDependencies": {
    "typescript": "^5.0.0",
    "@types/node": "^20.0.0"
  }
}
`, repoName),
		"tsconfig.json": `{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "lib": ["ES2020"],
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}
`,
		".gitignore": `node_modules/
dist/
npm-debug.log
yarn-error.log
.env
.DS_Store
*.tsbuildinfo
.vscode/
.idea/
`,
	}
}

// GoTemplate Go模板
type GoTemplate struct{}

func (t *GoTemplate) GetFileExtension() string     { return ".go" }
func (t *GoTemplate) GetActivityFileName() string  { return "activity.go" }
func (t *GoTemplate) GetLanguageName() string      { return "Go" }

func (t *GoTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	return fmt.Sprintf(`package contributions

import "fmt"

// Contribution represents a contribution record for %s
// Commit %d of %d
// Generated by GreenWall
type Contribution struct {
	Date          string
	CommitNumber  int
	TotalCommits  int
}

// NewContribution creates a new contribution instance
func NewContribution() *Contribution {
	return &Contribution{
		Date:         "%s",
		CommitNumber: %d,
		TotalCommits: %d,
	}
}

// GetInfo returns the contribution information
func (c *Contribution) GetInfo() string {
	return fmt.Sprintf("Contribution on %%s (%%d/%%d)", c.Date, c.CommitNumber, c.TotalCommits)
}

// String implements the Stringer interface
func (c *Contribution) String() string {
	return c.GetInfo()
}
`, date, commitNum, totalCommits, date, commitNum, totalCommits)
}

func (t *GoTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA Go project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated Go contribution records.\n\n## Structure\n\n- `contributions/` - Go package with contribution records\n- `go.mod` - Go module file\n- `README.md` - This file\n\n## Installation\n\n```bash\ngo mod download\n```\n\n## License\n\nMIT License\n", repoName)
}

func (t *GoTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"go.mod": fmt.Sprintf(`module github.com/greenwall/%s

go 1.21
`, repoName),
		".gitignore": `# Binaries
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary
*.test

# Output
*.out

# Go workspace
go.work

# IDE
.vscode/
.idea/
*.swp
*.swo
*~
`,
	}
}

// RustTemplate Rust模板
type RustTemplate struct{}

func (t *RustTemplate) GetFileExtension() string     { return ".rs" }
func (t *RustTemplate) GetActivityFileName() string  { return "activity.rs" }
func (t *RustTemplate) GetLanguageName() string      { return "Rust" }

func (t *RustTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	_ = fmt.Sprintf("contribution_%s_%d", strings.ReplaceAll(date, "-", "_"), commitNum)
	return fmt.Sprintf(`//! Contribution record for %s
//! Commit %d of %d
//! Generated by GreenWall

/// Represents a single contribution record
pub struct Contribution {
    date: String,
    commit_number: u32,
    total_commits: u32,
}

impl Contribution {
    /// Creates a new Contribution instance
    pub fn new() -> Self {
        Contribution {
            date: "%s".to_string(),
            commit_number: %d,
            total_commits: %d,
        }
    }
    
    /// Returns contribution information
    pub fn get_info(&self) -> String {
        format!("Contribution on {} ({}/{})", self.date, self.commit_number, self.total_commits)
    }
}

impl Default for Contribution {
    fn default() -> Self {
        Self::new()
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_contribution() {
        let contribution = Contribution::new();
        assert_eq!(contribution.date, "%s");
    }
}
`, date, commitNum, totalCommits, date, commitNum, totalCommits, date)
}

func (t *RustTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA Rust project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated Rust contribution records.\n\n## Structure\n\n- `src/` - Rust source files\n- `Cargo.toml` - Rust package manifest\n- `README.md` - This file\n\n## Build\n\n```bash\ncargo build\n```\n\n## Test\n\n```bash\ncargo test\n```\n\n## License\n\nMIT License\n", repoName)
}

func (t *RustTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"Cargo.toml": fmt.Sprintf(`[package]
name = "%s"
version = "1.0.0"
edition = "2021"

[dependencies]
`, repoName),
		".gitignore": `# Rust
target/
Cargo.lock
**/*.rs.bk
*.pdb

# IDE
.vscode/
.idea/
*.swp
`,
	}
}

// CppTemplate C++模板
type CppTemplate struct{}

func (t *CppTemplate) GetFileExtension() string     { return ".cpp" }
func (t *CppTemplate) GetActivityFileName() string  { return "activity.cpp" }
func (t *CppTemplate) GetLanguageName() string      { return "C++" }

func (t *CppTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	className := fmt.Sprintf("Contribution_%s_%d", strings.ReplaceAll(date, "-", "_"), commitNum)
	return fmt.Sprintf(`/**
 * Contribution record for %s
 * Commit %d of %d
 * Generated by GreenWall
 */

#include <string>
#include <iostream>

class %s {
private:
    std::string date;
    int commitNumber;
    int totalCommits;

public:
    %s() : date("%s"), commitNumber(%d), totalCommits(%d) {}
    
    std::string getDate() const { return date; }
    int getCommitNumber() const { return commitNumber; }
    int getTotalCommits() const { return totalCommits; }
    
    std::string getInfo() const {
        return "Contribution on " + date + " (" + 
               std::to_string(commitNumber) + "/" + 
               std::to_string(totalCommits) + ")";
    }
};

int main() {
    %s contribution;
    std::cout << contribution.getInfo() << std::endl;
    return 0;
}
`, date, commitNum, totalCommits, className, className, date, commitNum, totalCommits, className)
}

func (t *CppTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA C++ project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated C++ contribution records.\n\n## Structure\n\n- `src/` - C++ source files\n- `CMakeLists.txt` - CMake build configuration\n- `README.md` - This file\n\n## Build\n\n```bash\nmkdir build && cd build\ncmake ..\nmake\n```\n\n## License\n\nMIT License\n", repoName)
}

func (t *CppTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"CMakeLists.txt": fmt.Sprintf(`cmake_minimum_required(VERSION 3.10)
project(%s)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

file(GLOB SOURCES "src/*.cpp")
add_executable(${PROJECT_NAME} ${SOURCES})
`, repoName),
		".gitignore": `# C++
*.o
*.obj
*.exe
*.out
*.app
build/
cmake-build-*/

# IDE
.vscode/
.idea/
*.swp
`,
	}
}

// CTemplate C模板
type CTemplate struct{}

func (t *CTemplate) GetFileExtension() string     { return ".c" }
func (t *CTemplate) GetActivityFileName() string  { return "activity.c" }
func (t *CTemplate) GetLanguageName() string      { return "C" }

func (t *CTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	_ = fmt.Sprintf("contribution_%s_%d", strings.ReplaceAll(date, "-", "_"), commitNum)
	return fmt.Sprintf(`/**
 * Contribution record for %s
 * Commit %d of %d
 * Generated by GreenWall
 */

#include <stdio.h>
#include <string.h>

typedef struct {
    char date[11];
    int commit_number;
    int total_commits;
} Contribution;

Contribution create_contribution() {
    Contribution c;
    strcpy(c.date, "%s");
    c.commit_number = %d;
    c.total_commits = %d;
    return c;
}

void print_contribution(Contribution* c) {
    printf("Contribution on %%s (%%d/%%d)\n", 
           c->date, c->commit_number, c->total_commits);
}

int main() {
    Contribution contribution = create_contribution();
    print_contribution(&contribution);
    return 0;
}
`, date, commitNum, totalCommits, date, commitNum, totalCommits)
}

func (t *CTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA C project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated C contribution records.\n\n## Structure\n\n- `src/` - C source files\n- `Makefile` - Build configuration\n- `README.md` - This file\n\n## Build\n\n```bash\nmake\n```\n\n## License\n\nMIT License\n", repoName)
}

func (t *CTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"Makefile": `CC=gcc
CFLAGS=-Wall -Wextra -std=c11
SRC=$(wildcard src/*.c)
OBJ=$(SRC:.c=.o)
TARGET=program

all: $(TARGET)

$(TARGET): $(OBJ)
	$(CC) $(CFLAGS) -o $@ $^

clean:
	rm -f $(OBJ) $(TARGET)

.PHONY: all clean
`,
		".gitignore": `# C
*.o
*.obj
*.exe
*.out
*.app
program

# IDE
.vscode/
.idea/
*.swp
`,
	}
}

// CSharpTemplate C#模板
type CSharpTemplate struct{}

func (t *CSharpTemplate) GetFileExtension() string     { return ".cs" }
func (t *CSharpTemplate) GetActivityFileName() string  { return "Activity.cs" }
func (t *CSharpTemplate) GetLanguageName() string      { return "C#" }

func (t *CSharpTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	className := fmt.Sprintf("Contribution_%s_%d", strings.ReplaceAll(date, "-", "_"), commitNum)
	return fmt.Sprintf(`/**
 * Contribution record for %s
 * Commit %d of %d
 * Generated by GreenWall
 */

using System;

namespace GreenWall.Contributions
{
    public class %s
    {
        public string Date { get; } = "%s";
        public int CommitNumber { get; } = %d;
        public int TotalCommits { get; } = %d;

        public string GetInfo()
        {
            return $"Contribution on {Date} ({CommitNumber}/{TotalCommits})";
        }

        public override string ToString()
        {
            return GetInfo();
        }
    }
}
`, date, commitNum, totalCommits, className, date, commitNum, totalCommits)
}

func (t *CSharpTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA C# project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated C# contribution records.\n\n## Structure\n\n- `src/` - C# source files\n- `%s.csproj` - Project file\n- `README.md` - This file\n\n## Build\n\n```bash\ndotnet build\n```\n\n## License\n\nMIT License\n", repoName, repoName)
}

func (t *CSharpTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		repoName + ".csproj": `<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>net6.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>
</Project>
`,
		".gitignore": `# C#
bin/
obj/
*.user
*.suo
*.cache

# IDE
.vscode/
.idea/
*.swp
`,
	}
}

// PHPTemplate PHP模板
type PHPTemplate struct{}

func (t *PHPTemplate) GetFileExtension() string     { return ".php" }
func (t *PHPTemplate) GetActivityFileName() string  { return "Activity.php" }
func (t *PHPTemplate) GetLanguageName() string      { return "PHP" }

func (t *PHPTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	className := fmt.Sprintf("Contribution_%s_%d", strings.ReplaceAll(date, "-", "_"), commitNum)
	return fmt.Sprintf(`<?php
/**
 * Contribution record for %s
 * Commit %d of %d
 * Generated by GreenWall
 */

namespace GreenWall\Contributions;

class %s
{
    private string $date = "%s";
    private int $commitNumber = %d;
    private int $totalCommits = %d;

    public function getDate(): string
    {
        return $this->date;
    }

    public function getCommitNumber(): int
    {
        return $this->commitNumber;
    }

    public function getTotalCommits(): int
    {
        return $this->totalCommits;
    }

    public function getInfo(): string
    {
        return sprintf(
            "Contribution on %%s (%%d/%%d)",
            $this->date,
            $this->commitNumber,
            $this->totalCommits
        );
    }

    public function __toString(): string
    {
        return $this->getInfo();
    }
}
`, date, commitNum, totalCommits, className, date, commitNum, totalCommits)
}

func (t *PHPTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA PHP project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated PHP contribution records.\n\n## Structure\n\n- `src/` - PHP source files\n- `composer.json` - Composer configuration\n- `README.md` - This file\n\n## Installation\n\n```bash\ncomposer install\n```\n\n## License\n\nMIT License\n", repoName)
}

func (t *PHPTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"composer.json": fmt.Sprintf(`{
    "name": "greenwall/%s",
    "description": "Generated with GreenWall",
    "type": "project",
    "require": {
        "php": ">=8.0"
    },
    "autoload": {
        "psr-4": {
            "GreenWall\\\\Contributions\\\\": "src/"
        }
    }
}
`, repoName),
		".gitignore": `# PHP
vendor/
composer.lock
*.log

# IDE
.vscode/
.idea/
*.swp
`,
	}
}

// RubyTemplate Ruby模板
type RubyTemplate struct{}

func (t *RubyTemplate) GetFileExtension() string     { return ".rb" }
func (t *RubyTemplate) GetActivityFileName() string  { return "activity.rb" }
func (t *RubyTemplate) GetLanguageName() string      { return "Ruby" }

func (t *RubyTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	className := fmt.Sprintf("Contribution_%s_%d", strings.ReplaceAll(date, "-", "_"), commitNum)
	return fmt.Sprintf(`# Contribution record for %s
# Commit %d of %d
# Generated by GreenWall

module GreenWall
  module Contributions
    class %s
      attr_reader :date, :commit_number, :total_commits

      def initialize
        @date = "%s"
        @commit_number = %d
        @total_commits = %d
      end

      def info
        "Contribution on #{@date} (#{@commit_number}/#{@total_commits})"
      end

      def to_s
        info
      end
    end
  end
end

if __FILE__ == $0
  contribution = GreenWall::Contributions::%s.new
  puts contribution.info
end
`, date, commitNum, totalCommits, className, date, commitNum, totalCommits, className)
}

func (t *RubyTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA Ruby project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated Ruby contribution records.\n\n## Structure\n\n- `lib/` - Ruby source files\n- `Gemfile` - Gem dependencies\n- `README.md` - This file\n\n## Installation\n\n```bash\nbundle install\n```\n\n## License\n\nMIT License\n", repoName)
}

func (t *RubyTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"Gemfile": `source 'https://rubygems.org'

ruby '>= 3.0.0'

# Add your dependencies here
`,
		".gitignore": `# Ruby
*.gem
*.rbc
.bundle
vendor/bundle

# IDE
.vscode/
.idea/
*.swp
`,
	}
}

// SwiftTemplate Swift模板
type SwiftTemplate struct{}

func (t *SwiftTemplate) GetFileExtension() string     { return ".swift" }
func (t *SwiftTemplate) GetActivityFileName() string  { return "Activity.swift" }
func (t *SwiftTemplate) GetLanguageName() string      { return "Swift" }

func (t *SwiftTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	structName := fmt.Sprintf("Contribution_%s_%d", strings.ReplaceAll(date, "-", "_"), commitNum)
	return fmt.Sprintf(`/**
 * Contribution record for %s
 * Commit %d of %d
 * Generated by GreenWall
 */

import Foundation

struct %s {
    let date: String = "%s"
    let commitNumber: Int = %d
    let totalCommits: Int = %d
    
    func getInfo() -> String {
        return "Contribution on \(date) (\(commitNumber)/\(totalCommits))"
    }
}

extension %s: CustomStringConvertible {
    var description: String {
        return getInfo()
    }
}

// Main execution
let contribution = %s()
print(contribution.getInfo())
`, date, commitNum, totalCommits, structName, date, commitNum, totalCommits, structName, structName)
}

func (t *SwiftTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA Swift project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated Swift contribution records.\n\n## Structure\n\n- `Sources/` - Swift source files\n- `Package.swift` - Swift package manifest\n- `README.md` - This file\n\n## Build\n\n```bash\nswift build\n```\n\n## Run\n\n```bash\nswift run\n```\n\n## License\n\nMIT License\n", repoName)
}

func (t *SwiftTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"Package.swift": fmt.Sprintf(`// swift-tools-version:5.5
import PackageDescription

let package = Package(
    name: "%s",
    platforms: [
        .macOS(.v12)
    ],
    targets: [
        .executableTarget(
            name: "%s",
            path: "Sources"
        )
    ]
)
`, repoName, repoName),
		".gitignore": `# Swift
.build/
.swiftpm/
*.xcodeproj
*.xcworkspace

# IDE
.vscode/
.idea/
*.swp
`,
	}
}

// KotlinTemplate Kotlin模板
type KotlinTemplate struct{}

func (t *KotlinTemplate) GetFileExtension() string     { return ".kt" }
func (t *KotlinTemplate) GetActivityFileName() string  { return "Activity.kt" }
func (t *KotlinTemplate) GetLanguageName() string      { return "Kotlin" }

func (t *KotlinTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	className := fmt.Sprintf("Contribution_%s_%d", strings.ReplaceAll(date, "-", "_"), commitNum)
	return fmt.Sprintf(`/**
 * Contribution record for %s
 * Commit %d of %d
 * Generated by GreenWall
 */

package com.greenwall.contributions

data class %s(
    val date: String = "%s",
    val commitNumber: Int = %d,
    val totalCommits: Int = %d
) {
    fun getInfo(): String {
        return "Contribution on $date ($commitNumber/$totalCommits)"
    }
    
    override fun toString(): String = getInfo()
}

fun main() {
    val contribution = %s()
    println(contribution.getInfo())
}
`, date, commitNum, totalCommits, className, date, commitNum, totalCommits, className)
}

func (t *KotlinTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA Kotlin project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated Kotlin contribution records.\n\n## Structure\n\n- `src/main/kotlin/` - Kotlin source files\n- `build.gradle.kts` - Gradle build configuration\n- `README.md` - This file\n\n## Build\n\n```bash\n./gradlew build\n```\n\n## Run\n\n```bash\n./gradlew run\n```\n\n## License\n\nMIT License\n", repoName)
}

func (t *KotlinTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"build.gradle.kts": `plugins {
    kotlin("jvm") version "1.9.0"
    application
}

group = "com.greenwall"
version = "1.0.0"

repositories {
    mavenCentral()
}

dependencies {
    implementation(kotlin("stdlib"))
}

application {
    mainClass.set("com.greenwall.contributions.MainKt")
}
`,
		"settings.gradle.kts": fmt.Sprintf(`rootProject.name = "%s"
`, repoName),
		".gitignore": `# Kotlin/Gradle
.gradle/
build/
*.jar
*.class

# IDE
.vscode/
.idea/
*.swp
`,
	}
}

// ShellTemplate Shell脚本模板
type ShellTemplate struct{}

func (t *ShellTemplate) GetFileExtension() string     { return ".sh" }
func (t *ShellTemplate) GetActivityFileName() string  { return "activity.sh" }
func (t *ShellTemplate) GetLanguageName() string      { return "Shell" }

func (t *ShellTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	_ = fmt.Sprintf("contribution_%s_%d", strings.ReplaceAll(date, "-", "_"), commitNum)
	return fmt.Sprintf(`#!/bin/bash
# Contribution record for %s
# Commit %d of %d
# Generated by GreenWall

DATE="%s"
COMMIT_NUMBER=%d
TOTAL_COMMITS=%d

function get_info() {
    echo "Contribution on $DATE ($COMMIT_NUMBER/$TOTAL_COMMITS)"
}

function main() {
    get_info
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
`, date, commitNum, totalCommits, date, commitNum, totalCommits)
}

func (t *ShellTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA Shell script project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated Shell script contribution records.\n\n## Structure\n\n- `scripts/` - Shell scripts\n- `README.md` - This file\n\n## Usage\n\n```bash\nchmod +x scripts/*.sh\n./scripts/contribution_*.sh\n```\n\n## License\n\nMIT License\n", repoName)
}

func (t *ShellTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"scripts/.gitkeep": "",
		".gitignore": `# Shell
*.swp
*.swo
*~
.DS_Store

# IDE
.vscode/
.idea/
`,
	}
}

// VueTemplate Vue.js模板
type VueTemplate struct{}

func (t *VueTemplate) GetFileExtension() string     { return ".vue" }
func (t *VueTemplate) GetActivityFileName() string  { return "Activity.vue" }
func (t *VueTemplate) GetLanguageName() string      { return "Vue" }

func (t *VueTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	componentName := fmt.Sprintf("Contribution%s%d", strings.ReplaceAll(date, "-", ""), commitNum)
	return fmt.Sprintf(`<!--
  Contribution record for %s
  Commit %d of %d
  Generated by GreenWall
-->

<template>
  <div class="contribution-card">
    <h3>{{ title }}</h3>
    <div class="contribution-info">
      <p><strong>Date:</strong> {{ date }}</p>
      <p><strong>Commit:</strong> {{ commitNumber }} / {{ totalCommits }}</p>
    </div>
  </div>
</template>

<script>
export default {
  name: '%s',
  data() {
    return {
      date: '%s',
      commitNumber: %d,
      totalCommits: %d,
      title: 'Contribution Record'
    }
  },
  computed: {
    info() {
      return 'Contribution on ' + this.date + ' (' + this.commitNumber + '/' + this.totalCommits + ')'
    }
  },
  mounted() {
    console.log(this.info)
  }
}
</script>

<style scoped>
.contribution-card {
  padding: 20px;
  border: 1px solid #e0e0e0;
  border-radius: 8px;
  margin: 10px 0;
}

.contribution-info {
  margin-top: 10px;
}

.contribution-info p {
  margin: 5px 0;
}
</style>
`, date, commitNum, totalCommits, componentName, date, commitNum, totalCommits)
}

func (t *VueTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA Vue.js project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated Vue.js contribution components.\n\n## Structure\n\n- `src/components/` - Vue components\n- `package.json` - Project configuration\n- `README.md` - This file\n\n## Setup\n\n```bash\nnpm install\n```\n\n## Development\n\n```bash\nnpm run dev\n```\n\n## Build\n\n```bash\nnpm run build\n```\n\n## License\n\nMIT License\n", repoName)
}

func (t *VueTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"src/components/.gitkeep": "",
		"package.json": fmt.Sprintf(`{
  "name": "%s",
  "version": "1.0.0",
  "description": "Generated with GreenWall",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "vue": "^3.3.0"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^4.4.0",
    "vite": "^5.0.0"
  }
}
`, repoName),
		"vite.config.js": `import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'

export default defineConfig({
  plugins: [vue()]
})
`,
		".gitignore": `# Vue
node_modules/
dist/
*.local

# IDE
.vscode/
.idea/
*.swp
`,
	}
}

// HTMLTemplate HTML模板
type HTMLTemplate struct{}

func (t *HTMLTemplate) GetFileExtension() string     { return ".html" }
func (t *HTMLTemplate) GetActivityFileName() string  { return "activity.html" }
func (t *HTMLTemplate) GetLanguageName() string      { return "HTML" }

func (t *HTMLTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	pageId := fmt.Sprintf("contribution-%s-%d", strings.ReplaceAll(date, "-", ""), commitNum)
	return fmt.Sprintf(`<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contribution %s - %d</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .contribution-card {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            margin-top: 0;
        }
        .info {
            color: #666;
            line-height: 1.8;
        }
        .badge {
            display: inline-block;
            padding: 5px 15px;
            background: #4CAF50;
            color: white;
            border-radius: 20px;
            font-size: 14px;
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="contribution-card" id="%s">
        <h1>Contribution Record</h1>
        <div class="info">
            <p><strong>Date:</strong> %s</p>
            <p><strong>Commit Number:</strong> %d</p>
            <p><strong>Total Commits:</strong> %d</p>
        </div>
        <span class="badge">Generated by GreenWall</span>
    </div>
    
    <script>
        console.log('Contribution on %s (%%d/%%d)', %d, %d);
    </script>
</body>
</html>
`, date, commitNum, pageId, date, commitNum, totalCommits, date, commitNum, totalCommits)
}

func (t *HTMLTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nAn HTML project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated HTML contribution pages.\n\n## Structure\n\n- `pages/` - HTML pages\n- `README.md` - This file\n\n## Usage\n\nOpen any HTML file in a web browser.\n\n## License\n\nMIT License\n", repoName)
}

func (t *HTMLTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"pages/.gitkeep": "",
		".gitignore": `# General
.DS_Store
*~

# IDE
.vscode/
.idea/
*.swp
`,
	}
}

// CSSTemplate CSS模板
type CSSTemplate struct{}

func (t *CSSTemplate) GetFileExtension() string     { return ".css" }
func (t *CSSTemplate) GetActivityFileName() string  { return "activity.css" }
func (t *CSSTemplate) GetLanguageName() string      { return "CSS" }

func (t *CSSTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	className := fmt.Sprintf("contribution-%s-%d", strings.ReplaceAll(date, "-", ""), commitNum)
	return fmt.Sprintf(`/**
 * Contribution record for %s
 * Commit %d of %d
 * Generated by GreenWall
 */

.%s {
    --date: "%s";
    --commit-number: %d;
    --total-commits: %d;
    
    display: block;
    padding: 20px;
    margin: 10px 0;
    background: linear-gradient(135deg, #667eea 0%%, #764ba2 100%%);
    border-radius: 8px;
    color: white;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

.%s::before {
    content: "Contribution on " var(--date);
    display: block;
    font-size: 18px;
    font-weight: bold;
    margin-bottom: 10px;
}

.%s::after {
    content: "Commit " counter(commit-counter) " / " var(--total-commits);
    display: block;
    font-size: 14px;
    opacity: 0.9;
}

.%s:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: all 0.3s ease;
}
`, date, commitNum, totalCommits, className, date, commitNum, totalCommits, className, className, className)
}

func (t *CSSTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA CSS project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated CSS contribution styles.\n\n## Structure\n\n- `styles/` - CSS stylesheets\n- `README.md` - This file\n\n## Usage\n\nInclude the CSS files in your HTML:\n\n```html\n<link rel=\"stylesheet\" href=\"styles/contribution_*.css\">\n```\n\n## License\n\nMIT License\n", repoName)
}

func (t *CSSTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"styles/.gitkeep": "",
		".gitignore": `# CSS
*.map

# IDE
.vscode/
.idea/
*.swp
`,
	}
}

// SCSSTemplate SCSS模板
type SCSSTemplate struct{}

func (t *SCSSTemplate) GetFileExtension() string     { return ".scss" }
func (t *SCSSTemplate) GetActivityFileName() string  { return "activity.scss" }
func (t *SCSSTemplate) GetLanguageName() string      { return "SCSS" }

func (t *SCSSTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	className := fmt.Sprintf("contribution-%s-%d", strings.ReplaceAll(date, "-", ""), commitNum)
	return fmt.Sprintf(`/**
 * Contribution record for %s
 * Commit %d of %d
 * Generated by GreenWall
 */

$contribution-date: "%s";
$commit-number: %d;
$total-commits: %d;

.%s {
    $primary-color: #667eea;
    $secondary-color: #764ba2;
    
    display: block;
    padding: 20px;
    margin: 10px 0;
    background: linear-gradient(135deg, $primary-color 0%%, $secondary-color 100%%);
    border-radius: 8px;
    color: white;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    
    &::before {
        content: "Contribution on #{$contribution-date}";
        display: block;
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 10px;
    }
    
    &::after {
        content: "Commit #{$commit-number} / #{$total-commits}";
        display: block;
        font-size: 14px;
        opacity: 0.9;
    }
    
    &:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        transition: all 0.3s ease;
    }
}
`, date, commitNum, totalCommits, date, commitNum, totalCommits, className)
}

func (t *SCSSTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA SCSS project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated SCSS contribution styles.\n\n## Structure\n\n- `styles/` - SCSS stylesheets\n- `README.md` - This file\n\n## Build\n\n```bash\nnpm install -g sass\nsass styles/contribution_*.scss styles/contribution_*.css\n```\n\n## License\n\nMIT License\n", repoName)
}

func (t *SCSSTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"styles/.gitkeep": "",
		"package.json": fmt.Sprintf(`{
  "name": "%s",
  "version": "1.0.0",
  "description": "Generated with GreenWall",
  "scripts": {
    "build": "sass styles:dist",
    "watch": "sass --watch styles:dist"
  },
  "devDependencies": {
    "sass": "^1.69.0"
  }
}
`, repoName),
		".gitignore": `# SCSS
*.css.map
dist/
node_modules/

# IDE
.vscode/
.idea/
*.swp
`,
	}
}

// SQLTemplate SQL模板
type SQLTemplate struct{}

func (t *SQLTemplate) GetFileExtension() string     { return ".sql" }
func (t *SQLTemplate) GetActivityFileName() string  { return "activity.sql" }
func (t *SQLTemplate) GetLanguageName() string      { return "SQL" }

func (t *SQLTemplate) GenerateCode(date string, commitNum int, totalCommits int) string {
	tableName := fmt.Sprintf("contribution_%s_%d", strings.ReplaceAll(date, "-", "_"), commitNum)
	return fmt.Sprintf(`-- Contribution record for %s
-- Commit %d of %d
-- Generated by GreenWall

CREATE TABLE IF NOT EXISTS %s (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    contribution_date DATE NOT NULL DEFAULT '%s',
    commit_number INTEGER NOT NULL DEFAULT %d,
    total_commits INTEGER NOT NULL DEFAULT %d,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO %s (contribution_date, commit_number, total_commits)
VALUES ('%s', %d, %d);

-- Query to view contribution info
SELECT 
    'Contribution on ' || contribution_date || ' (' || commit_number || '/' || total_commits || ')' AS info
FROM %s
WHERE id = (SELECT MAX(id) FROM %s);

-- Create index for better query performance
CREATE INDEX IF NOT EXISTS idx_%s_date ON %s(contribution_date);
`, date, commitNum, totalCommits, tableName, date, commitNum, totalCommits, tableName, date, commitNum, totalCommits, tableName, tableName, tableName, tableName)
}

func (t *SQLTemplate) GetReadmeContent(repoName string) string {
	return fmt.Sprintf("# %s\n\nA SQL project generated with [GreenWall](https://github.com/zmrlft/GreenWall).\n\n## About\n\nThis repository contains automatically generated SQL contribution records.\n\n## Structure\n\n- `migrations/` - SQL migration files\n- `README.md` - This file\n\n## Usage\n\n```bash\n# SQLite\nsqlite3 contributions.db < migrations/contribution_*.sql\n\n# MySQL\nmysql -u username -p database_name < migrations/contribution_*.sql\n\n# PostgreSQL\npsql -U username -d database_name -f migrations/contribution_*.sql\n```\n\n## License\n\nMIT License\n", repoName)
}

func (t *SQLTemplate) GetAdditionalFiles(repoName string) map[string]string {
	return map[string]string{
		"migrations/.gitkeep": "",
		"schema.sql": `-- Database schema for contributions
CREATE TABLE IF NOT EXISTS contributions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    contribution_date DATE NOT NULL,
    commit_number INTEGER NOT NULL,
    total_commits INTEGER NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX idx_contributions_date ON contributions(contribution_date);
`,
		".gitignore": `# SQL
*.db
*.sqlite
*.sqlite3

# IDE
.vscode/
.idea/
*.swp
`,
	}
}

// GetLanguageTemplate 根据语言类型获取对应的模板
func GetLanguageTemplate(lang LanguageType) LanguageTemplate {
	switch lang {
	case LangJava:
		return &JavaTemplate{}
	case LangPython:
		return &PythonTemplate{}
	case LangJavaScript:
		return &JavaScriptTemplate{}
	case LangTypeScript:
		return &TypeScriptTemplate{}
	case LangGo:
		return &GoTemplate{}
	case LangRust:
		return &RustTemplate{}
	case LangCpp:
		return &CppTemplate{}
	case LangC:
		return &CTemplate{}
	case LangCSharp:
		return &CSharpTemplate{}
	case LangPHP:
		return &PHPTemplate{}
	case LangRuby:
		return &RubyTemplate{}
	case LangSwift:
		return &SwiftTemplate{}
	case LangKotlin:
		return &KotlinTemplate{}
	case LangShell:
		return &ShellTemplate{}
	case LangVue:
		return &VueTemplate{}
	case LangHTML:
		return &HTMLTemplate{}
	case LangCSS:
		return &CSSTemplate{}
	case LangSCSS:
		return &SCSSTemplate{}
	case LangSQL:
		return &SQLTemplate{}
	case LangMarkdown:
		fallthrough
	default:
		return &MarkdownTemplate{}
	}
}

// GetSupportedLanguages 获取所有支持的语言列表
func GetSupportedLanguages() []map[string]string {
	languages := []LanguageType{
		LangMarkdown,
		LangJava,
		LangPython,
		LangJavaScript,
		LangTypeScript,
		LangGo,
		LangRust,
		LangCpp,
		LangC,
		LangCSharp,
		LangPHP,
		LangRuby,
		LangSwift,
		LangKotlin,
		LangShell,
		LangVue,
		LangHTML,
		LangCSS,
		LangSCSS,
		LangSQL,
	}
	
	result := make([]map[string]string, 0, len(languages))
	for _, lang := range languages {
		template := GetLanguageTemplate(lang)
		result = append(result, map[string]string{
			"value": string(lang),
			"label": template.GetLanguageName(),
		})
	}
	
	return result
}

// getCodeFilePath 获取代码文件的路径
func getCodeFilePath(repoPath string, lang LanguageType, date string, commitNum int) string {
	template := GetLanguageTemplate(lang)
	ext := template.GetFileExtension()
	
	switch lang {
	case LangJava:
		// Java文件放在标准的包结构中
		fileName := fmt.Sprintf("Contribution_%s_%d%s", strings.ReplaceAll(date, "-", "_"), commitNum, ext)
		return filepath.Join(repoPath, "src", "main", "java", "com", "greenwall", "contributions", fileName)
	case LangKotlin:
		// Kotlin文件放在标准的包结构中
		fileName := fmt.Sprintf("Contribution_%s_%d%s", strings.ReplaceAll(date, "-", "_"), commitNum, ext)
		return filepath.Join(repoPath, "src", "main", "kotlin", "com", "greenwall", "contributions", fileName)
	case LangCSharp:
		// C#文件放在src目录
		fileName := fmt.Sprintf("Contribution_%s_%d%s", strings.ReplaceAll(date, "-", "_"), commitNum, ext)
		return filepath.Join(repoPath, "src", fileName)
	case LangPython:
		// Python文件放在contributions包中
		fileName := fmt.Sprintf("contribution_%s_%d%s", strings.ReplaceAll(date, "-", "_"), commitNum, ext)
		return filepath.Join(repoPath, "contributions", fileName)
	case LangGo:
		// Go文件放在contributions包中
		fileName := fmt.Sprintf("contribution_%s_%d%s", strings.ReplaceAll(date, "-", "_"), commitNum, ext)
		return filepath.Join(repoPath, "contributions", fileName)
	case LangRust:
		// Rust文件放在src目录
		fileName := fmt.Sprintf("contribution_%s_%d%s", strings.ReplaceAll(date, "-", "_"), commitNum, ext)
		return filepath.Join(repoPath, "src", fileName)
	case LangRuby:
		// Ruby文件放在lib目录
		fileName := fmt.Sprintf("contribution_%s_%d%s", strings.ReplaceAll(date, "-", "_"), commitNum, ext)
		return filepath.Join(repoPath, "lib", fileName)
	case LangSwift:
		// Swift文件放在Sources目录
		fileName := fmt.Sprintf("Contribution_%s_%d%s", strings.ReplaceAll(date, "-", "_"), commitNum, ext)
		return filepath.Join(repoPath, "Sources", fileName)
	case LangPHP:
		// PHP文件放在src目录
		fileName := fmt.Sprintf("Contribution_%s_%d%s", strings.ReplaceAll(date, "-", "_"), commitNum, ext)
		return filepath.Join(repoPath, "src", fileName)
	case LangShell:
		// Shell脚本放在scripts目录
		fileName := fmt.Sprintf("contribution_%s_%d%s", strings.ReplaceAll(date, "-", "_"), commitNum, ext)
		return filepath.Join(repoPath, "scripts", fileName)
	case LangVue:
		// Vue组件放在src/components目录
		fileName := fmt.Sprintf("Contribution%s%d%s", strings.ReplaceAll(date, "-", ""), commitNum, ext)
		return filepath.Join(repoPath, "src", "components", fileName)
	case LangHTML:
		// HTML文件放在pages目录
		fileName := fmt.Sprintf("contribution_%s_%d%s", strings.ReplaceAll(date, "-", "_"), commitNum, ext)
		return filepath.Join(repoPath, "pages", fileName)
	case LangCSS, LangSCSS:
		// CSS/SCSS文件放在styles目录
		fileName := fmt.Sprintf("contribution_%s_%d%s", strings.ReplaceAll(date, "-", "_"), commitNum, ext)
		return filepath.Join(repoPath, "styles", fileName)
	case LangSQL:
		// SQL文件放在migrations目录
		fileName := fmt.Sprintf("contribution_%s_%d%s", strings.ReplaceAll(date, "-", "_"), commitNum, ext)
		return filepath.Join(repoPath, "migrations", fileName)
	default:
		// 其他语言(C, C++, JS, TS等)放在src目录
		fileName := fmt.Sprintf("contribution_%s_%d%s", strings.ReplaceAll(date, "-", "_"), commitNum, ext)
		return filepath.Join(repoPath, "src", fileName)
	}
}
